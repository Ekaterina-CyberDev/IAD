def find_gcd_with_8(number):
    """
    Находит НОД числа 8 и заданного числа, используя двоичное представление.
    Идея: НОД с числом 8 зависит от последних битов числа (делимости на 2, 4, 8)
    """
    # Преобразуем числа в двоичный вид
    bin_8 = bin(8)[2:]  # '1000'
    bin_num = bin(number)[2:]  # двоичное представление числа
    
    # Смотрим на последние биты числа
    last_bits = bin_num[-3:]  # последние 3 бита (для проверки делимости на 8)
    
    # Проверяем делимость на степени двойки
    if bin_num[-1] == '0':  # если последний бит 0 - делится на 2
        if len(bin_num) >= 2 and bin_num[-2] == '0':  # предпоследний бит 0 - делится на 4
            if len(bin_num) >= 3 and bin_num[-3] == '0':  # делится на 8
                return 8
            else:
                return 4
        else:
            return 2
    else:
        return 1  # если не делится на 2, то НОД = 1

# Задаем 10-значное число 
ten_digit_number = 1112343566
result = find_gcd_with_8(ten_digit_number)
print(f"НОД числа 8 и {ten_digit_number} равен {result}")