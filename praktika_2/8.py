import numpy as np  # Импорт библиотеки для математических вычислений
from scipy.stats import f  # Импорт F-распределения для статистического теста

# Исходные данные - последовательность чисел
data = [1.7, -5.4, -4.0, -5.9, -1.6, 0.0, 0.6, 2.1, 0.1, -4.9, -3.5, 
        5.9, 8.5, 9.9, 13.3, 11.1, 14.4, 16.2]
t = list(range(len(data)))  # Создаем список временных точек [0, 1, 2, ..., 17]

# Аппроксимация полиномом 7-й степени на первых 14 точках
coeffs_14 = np.polyfit(t[:14], data[:14], 7)  # Вычисляем коэффициенты полинома 7-й степени для первых 14 точек
pred_14 = np.polyval(coeffs_14, t[:14])  # Вычисляем предсказанные значения по найденным коэффициентам

ss_res_14 = np.sum((data[:14] - pred_14)**2)  # Считаем сумму квадратов разностей между реальными и предсказанными значениями
ss_tot_14 = np.sum((data[:14] - np.mean(data[:14]))**2)  # Считаем общую сумму квадратов отклонений от среднего

# Вычисляем коэффициент детерминации R² (долю объясненной дисперсии)
r2_14 = 1 - ss_res_14/ss_tot_14

# Вычисляем F-статистику: (объясненная дисперсия/степени свободы модели) / (необъясненная дисперсия/степени свободы ошибки)
f_stat_14 = (r2_14/7) / ((1-r2_14)/(14-7-1))  

# Вычисляем p-значение: вероятность получить такое же или большее значение F-статистики при верной нулевой гипотезе
p_14 = 1 - f.cdf(f_stat_14, 7, 6)  
print(f"14 точек: p-value = {p_14:.6f}")  # Выводим p-значение для 14 точек

# Аппроксимация полиномом 7-й степени на всех точках
coeffs_18 = np.polyfit(t, data, 7)  # Вычисляем коэффициенты полинома 7-й степени для всех 18 точек
pred_18 = np.polyval(coeffs_18, t)  # Вычисляем предсказанные значения для всех точек

ss_res_18 = np.sum((data - pred_18)**2)  # Сумма квадратов остатков для всех точек
ss_tot_18 = np.sum((data - np.mean(data))**2)  # Общая сумма квадратов для всех точек

r2_18 = 1 - ss_res_18/ss_tot_18  # Коэффициент детерминации R² для всех точек

f_stat_18 = (r2_18/7) / ((1-r2_18)/(18-7-1))  # F-статистика для всех точек

p_18 = 1 - f.cdf(f_stat_18, 7, 10)  # P-значение для всех точек
print(f"18 точек: p-value = {p_18:.6f}")  # Выводим p-значение для 18 точек