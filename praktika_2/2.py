import math

# Определение функции для вычисления обратной функции ошибок
def inv_erf(x):
    a = 0.147 # Константа для аппроксимации
    sign = 1 if x >= 0 else -1 # Определение знака результата (1 для x>=0, -1 для x<0)
    x = abs(x) # Работа с абсолютным значением x
    inner = (2/(math.pi*a) + (math.log(1-x**2))/2) # Вычисление внутреннего выражения для аппроксимации
    return sign * math.sqrt(math.sqrt(inner**2 - (math.log(1-x**2)/a) - inner)) # Вычисление окончательного результата с восстановлением знака

# Определение функции для вычисления квантиля нормального распределения
def inv_f_norm(p, mu=0, sigma=1):
    """
    Вычисляет квантиль нормального распределения.
    p - вероятность (от 0 до 1).
    mu - математическое ожидание.
    sigma - стандартное отклонение.
    """
    z = math.sqrt(2) * inv_erf(2*p - 1) # Вычисление z-статистики для стандартного нормального распределения
    return mu + z * sigma # Масштабирование результата на заданные mu и sigma

n = 1000 # Объем выборки (количество выстрелов)
p_hypothesis = 0.1 # Гипотетическая вероятность промаха по утверждению биатлониста
alpha = 0.05 # Уровень значимости (вероятность ошибки 1-го рода)

# Расчет параметров распределения
mu = n * p_hypothesis # Математическое ожидание числа промахов
sigma = math.sqrt(n * p_hypothesis * (1 - p_hypothesis)) # Стандартное отклонение числа промахов

# Расчет границ для двустороннего критерия
p_lower = alpha / 2 # Вероятность для нижней границы (левый хвост распределения)
p_upper = 1 - alpha / 2 # Вероятность для верхней границы (правый хвост распределения)

lower_bound = inv_f_norm(p_lower, mu, sigma) # Вычисление нижней границы доверительного интервала
upper_bound = inv_f_norm(p_upper, mu, sigma) # Вычисление верхней границы доверительного интервала

print(f"Уровень значимости α = {alpha}")
print(f"Математическое ожидание μ = {mu}")
print(f"Стандартное отклонение σ = {sigma:.2f}")
print(f"Нижняя граница: {lower_bound:.2f}")
print(f"Верхняя граница: {upper_bound:.2f}")
print(f"\nВывод: При уровне значимости {alpha*100}% гипотеза принимается, если число промахов лежит в интервале [{lower_bound:.0f}, {upper_bound:.0f}].")